# -*- coding: utf-8 -*-
"""T3&T4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dXjX1szBCk1Lx0Jvc6-siPnIhtsD3Taj
"""

list_of_diifrent_elements = [1,2,'hi',2.1,4,56,7+4j,'how','are you']
list_of_diifrent_elements

li = [2,3,5,6,7,8]
print(li[3])
print(li[:4])
print(li[3:])

n_list = ["Happy", [2, 0, 1, 5]]
print(n_list[0][1])

def multiply_list(mylist):
  result = 1
  for i in mylist:
    result = result * i
  return result 
#giving the lists
list1 = [23,34,45]
print(multiply_list(list1))

#addition
import numpy as np
print(np.sum(list1))
print(np.prod(list1))

print(max(list1))
print(min(list1))

num = [7,8, 120, 25, 44, 20, 27]
num = [x for x in num if x%2!=0]
print(num)

samp1 = [1,3,5,7,9,10]
samp2 = [2,4,6,8]
samp1.pop()
samp_combined = [samp1,samp2]
import functools
print(functools.reduce(lambda a,b:a+b, [samp1, samp2, samp_combined]))

[i**2 for i in range(1, 1+5)]+[i**2 for i in range(30, 30-5, -1)]

samp1 = [1,3,5,7,9,10]
samp2 = [2,4,6,8]
def combine_the_lists(samp1, samp2):
  samp1.pop()
  return (samp1+samp2)
import functools
functools.reduce(combine_the_lists, [samp1,samp2])

samp1 = [1,3,5,7,9,10]
samp2 = [2,4,6,8]
print(samp1[:-1] + samp2)
samp1[1]

samp1 = [1,3,5,7,9,10]
samp2 = [2,4,6,8]
samp1.pop()
samp1.extend(samp2)
print(samp1)

a={1:10,2:20} 
b={3:30,4:40}
a.update(b)
a[1]

def num_and_their_squares(n):
  answer = {}
  for i in range(1,n+1):
    answer[i] = i*i
  print(type(answer)) 
  return answer
n = int(input("enter a number : "))
num_and_their_squares(n)
# def num_and_their_squares(n):
#   for i in range(0,n):
#     answer = {n:n*n}
#     return answer
# n = int(input("enter a number : "))
# num_and_their_squares(n)

funk = lambda n:{i:i*i for i in range(1,n+1)}
funk(7)

val = []
def create_list(j):
  print(j)
  for i in j:
    print(i)
    val.append(i)
  return val, tuple(val)
values = input('enter the numbers: ')
split_values = values.split(',')
print(split_values)
a,b = create_list(split_values)  
print(a,b) 
for i in a:
  print(type(i))

def create_list(j):
  return list(j), tuple(j)
values = input('enter the numbers: ').split(',')
a,b = create_list(values)  
print(a,b)

for i in range(0,6):
  if i == 3:
    continue
  print(i)

samp_input = '1234abcd'
print(samp_input[::-1])

def reversing(stri):
  out_p = []
  for i in range(len(stri)-1,-1,-1):
    out_p.append(stri[i])
  return "".join(out_p)

reversing("1234abcd")

def finding_upp_and_lower(strin):
  capital_count = 0
  lower_count = 0
  for i in range(len(strin)):
    if strin[i] == strin[i].upper():
      capital_count += 1
    elif strin[i] == strin[i].lower():
      lower_count += 1

  return f"No. of Uppercase characters : {capital_count} No. of Lower case Characters : {lower_count}"

finding_upp_and_lower("abcSdefPghijQkl")

def new_list_creation(l):
  return list(set(l))

l = [1,1,2]
new_list_creation(l)

def sorting(string_list):
  return "-".join(sorted(string_list.split("-")))

sorting("wassup-bro-how-are-you")

def making_upper(sequence):
  return sequence.upper()

making_upper("Hello world Practice makes man perfect")

def squares_of_num(numb):
  squared_num = []
  for i in range(1,numb+1):
    squared_num.append(i*i*i)
  return tuple(squared_num)
print(squares_of_num(21))

def squares_of_num_v2(numb):
  return tuple(map(lambda x: x*x*x, range(1,numb+1)))
print(squares_of_num_v2(21))

import math
def squares_of_num_v3(numb):
  return tuple(map(lambda x: pow(x,3), range(1,numb+1)))
print(squares_of_num_v3(21))

limit = int(input())
def shownumbers(limit):
  gg = []
  for i in range(limit+1):
    if i % 2 == 0:
      print(i,"EVEN")
    else:
      print(i,"odd")
shownumbers(limit)

def make_list():
  return list(filter(lambda x: x%2 == 0, range(1,21)))
print(make_list())

def make_list1():
  return [x for x in range(1,21) if x%2 == 0]
print(make_list1())

def compute():
  try:
    return 5/0
  except Exception as e:
    print(e)
    return str(e)
compute()



import functools
rrr = [1,2,3,4,5,6,7]
def func(a,b):
  print(a,b)
  return str(a)+str(b)
functools.reduce(func,rrr)

k = lambda x: list(filter(lambda y: y %3 != 0 and y %7 == 0, range(1, x+1)))
k(30)

def foo():
  try:
    return 1
  finally:
    return 2
k = foo()
print(k)

def a():
  try:
    f(x, 4)
  finally:
    print('after f')
    print('after f?')
a()

